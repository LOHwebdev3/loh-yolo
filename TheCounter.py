import csv
import os
import cv2
import math
import logging

from ObjectCounter import ObjectCounter
from utility import to_snake_case, generate_unique_string


def TheCounter(name='', video_path='', model_path='', _angle = 30, _region_points=None,_show=False):
    if name == '':
        name = to_snake_case("ObjectCounter")

    unique_str = generate_unique_string(18)
    name = f"{name}"

    # üõë Suppress warnings
    if _region_points is None:
        _region_points = []
    logging.getLogger('ultralytics').setLevel(logging.ERROR)

    # üìå ‡πÄ‡∏õ‡∏¥‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    cap = cv2.VideoCapture(video_path)
    assert cap.isOpened(), "Error reading video file"

    w, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH, cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))

    # üîÑ ‡∏´‡∏°‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏ó‡∏ô‡πÄ‡∏™‡πâ‡∏ô
    angle = _angle  # ‡∏°‡∏∏‡∏°‡πÄ‡∏≠‡∏µ‡∏¢‡∏á (‡∏≠‡∏á‡∏®‡∏≤)
    angle_rad = math.radians(angle)

    rect_width = w*1.5  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
    rect_height = 150  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
    x_center, y_center = w // 2, h // 2  # ‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î 4 ‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô
    x_offset = rect_width // 2
    y_offset = rect_height // 2

    corners = [
        (int(x_center + x_offset * math.cos(angle_rad) - y_offset * math.sin(angle_rad)),
         int(y_center + x_offset * math.sin(angle_rad) + y_offset * math.cos(angle_rad))),

        (int(x_center - x_offset * math.cos(angle_rad) - y_offset * math.sin(angle_rad)),
         int(y_center - x_offset * math.sin(angle_rad) + y_offset * math.cos(angle_rad))),

        (int(x_center - x_offset * math.cos(angle_rad) + y_offset * math.sin(angle_rad)),
         int(y_center - x_offset * math.sin(angle_rad) - y_offset * math.cos(angle_rad))),

        (int(x_center + x_offset * math.cos(angle_rad) + y_offset * math.sin(angle_rad)),
         int(y_center + x_offset * math.sin(angle_rad) - y_offset * math.cos(angle_rad)))
    ]


    if len(_region_points) == 0:
        region_points = corners  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏∏‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    else:
        region_points = _region_points

    file_name = os.path.basename(video_path)

    if not os.path.exists(f'tmp/vdo_output/{name}'):
        os.makedirs(f'tmp/vdo_output/{name}')
    # üé• ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Video Writer
    video_writer = cv2.VideoWriter(f"tmp/vdo_output/{name}/{file_name}", cv2.VideoWriter_fourcc(*"mp4v"), fps, (w, h))


    csv_file = f"tmp/vdo_output/{name}/{file_name}.csv"
    with open(csv_file, mode="w", newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Name", "Type", "Count", "Time (seconds)"])
        pass

    def onAddCount(name, type, count, time):
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô console
        # print(f"{name} | obj : {type} count: {count} at time: {time} seconds")

        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏´‡∏°‡∏î append
        with open(csv_file, mode="a", newline='') as file:
            writer = csv.writer(file)
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß
            writer.writerow([name, type, count, round(time, 3)])

    # üîç ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ObjectCounter
    counter = ObjectCounter(
        show=_show,  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á GUI
        region=region_points,
        model=model_path,
        # show_in=True,
        # show_out=True,
        # line_width=2,
        verbose=False,  # ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° log
        onAddCount=onAddCount  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ count ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    )

    # üé¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    while cap.isOpened():
        success, im0 = cap.read()
        if not success:
            print(f"üìå{file_name} Video frame is empty or processing has completed.")
            break

        # Get the current timestamp in milliseconds
        current_time = cap.get(cv2.CAP_PROP_POS_MSEC) / 1000  # Convert to seconds

        # üìå ‡∏ô‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏
        im0 = counter.count(im0, current_time)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        video_writer.write(im0)

        # # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡∏Å‡∏î 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å)
        # cv2.imshow("Output", im0)
        # if cv2.waitKey(1) & 0xFF == ord('q'):
        #     break

    # üîö ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
    cap.release()
    video_writer.release()
    cv2.destroyAllWindows()